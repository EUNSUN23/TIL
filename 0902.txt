-배운것-

제로초 리액트 3-11~4-5 



*기존 배열/객체로 새로운 배열/객체 만들어주려면 기존에 새로운 값을 push하는 형태가 아니라,
아예 새로운 배열을 만들어서 그 안에 예전 배열/객체 를 spread연산자로 펴줄것.  
(그래야 리액트가 변화로 감지하고 렌더링시켜줌)

(ex)
state = {
object : {},
array : []
};

함수어쩌구 () => {        
		
		this.setState({  array : [...this.state.array, 1]});
		this.setState({ object : {...this.state.object ~});	
		}



* 클래스구조라면, 렌더함수 안에 console.log를 찍어서 렌더링이 되고있는지 여부 확인할수있다. (성능최적화 팁)

* state의 자료구조를 복잡하게 하지말자. (ex : 배열(객체(배열..)))) 실수하기 쉽다.
자료구조가 복잡해지면  props를 잘게 쪼개서 자식에게 작은 단위로 물려주면 된다. 

*렌더링 낭비 줄이기 (변화가 실제로 일어나는 상황에서만 렌더링 되게끔 하기)

<class에서만 사용가능>
-shouldComponentUpdate / 분기처리해서 렌더링 true되는 특정 조건 설정. 
-import React, { PureComponent } from 'react' , class 클래스명 extends PureComponent 
: 변화가 있는 것만 렌더링시켜주는듯 ? 

<hooks에서 -  React.memo>

import React, {PureComponent, memo} from 'react';

const Try = memo( ({tryInfo}) =>  {return (~~)}); 
		
		}

//자식에서 memo 혹은 PureComponent 라면 부모에게도 적용할 수 있다.


* React.createRef :  class에서 ref를 좀 더 적용하기쉽게 만든것. 

<사용>
--> import로 Component와 함께 createRef 불러오기. 
--> state바깥에 inputRef = createRef(); >> input ref = {this.inputRef}; 
--> this.inputRef.current.focus(); //hooks와 공통점이 생겨서 외울것이 하나 줄은거라고 한다..

* 일급객체(high-order-function) : 함수 안에 함수가 들어간것 (ex:함수형 state)

this.setState( (prevState) => {
	return { result : '홈런!', tries : [어쩌구]}
});

==> 다른언어에서는 지원하지 않지만 자바스크립트에서는 20년전부터 지원했음.
       js는 어떻게보면 대충만든언어지만 어떻게보면 미래일까지 생각해서 만든 언어


* 부모에게서 받은 props  를 state로 연결하기

**props는 자식이 임의로 못바꾸고 부모가 바꿔야 하지만, 자식이 props를 바꿔야 하는
일이 생길 때, props를 state로 받아서 수정한다. 단 좋은구조는 아님.

(ex)

const Try = memo( ({tryInfo}) => {

	const [result, setResult] = useState(tryInfo.result);


const onClick = () => {
	setResult('1');
}
});


* 리액트 조건문 (제로초 4-1) 
**리액트에서 작업할 때 반복문, 조건문을 그대로 안쓰고 다르게 바꿔쓰는 이유 : jsx에는 for, if문이 없다. 
class의 render함수 안에서는, 언어가 jsx이기때문에 if, for문을 쓰지 못한다. (가독성 저해하는 요인이기도 함)

for문은 map으로, if문은 조건문연산자(삼항연산자)로 대체한다. 

- 삼항연산자를 return하는 함수를 따로 만들어서 정리할수도 있다. (하지만 더 좋은건 컴포넌트로 따로 빼는것)

(ex) renderAverage = () => {
    return this.state.result.length === 0 ? null : (
      <div>
        {/*result가 빈배열이 아니면 평균값, 빈배열일때는 아무것도 안보이게하기*/}
        평균시간 :
        {this.state.result.reduce((a, c) => a + c) / this.state.result.length}
        ms
      </div>
    );
  };

*false, undefined, null은 jsx에서 '태그 없음' 을 의미한다. 

*구조분해 문법 : class 좀 더 깔끔하게 정리하기. state 쓸 때 미리 구조분해해두기.


*값이 변해도 새로 렌더링할 필요 없는 것들은 state바깥에 선언해주고 접근할 때 this.~ 으로 접근한다. 
( state가 변하면 렌더링 새로되기때문에)

(ex) timeout; timeout = setTimeout();  -->  this.timeout // clearTimeout에 필요하기때문에 setTimeout 변수에 담아줌.
      startTime; startTime = new Date(); --> this.startTime


* state로 설정한 값이 바뀔때, class는 render함수만 실행되지만 함수컴포넌트(hooks)에서는 함수 전체가 실행된다.

*렌더함수 안에 있는 태그들 컴포넌트화시키기
 : 성능최적화를 위해서는 필요없는 렌더링 낭비를 막아야한다. 특정 state 값이 변하면 render함수가 
실행되면서 바뀌어야 하는 값과 상관 없는 것들도 re-render 되는데, 무게가 큰 웹앱에서는 이것도 성능에 안좋다.
render함수 안에 들어있는것들 중 서로 연계되어 있지 않은 태그들은 각각 다른 컴포넌트로 분리해준다. 

*ref 

- dom(Document Object Model) 에 직접 접근
- state와 달리 ref값은 변해도 렌더링이 실행되지 않기때문에, 
hooks에서는 렌더링과 상관없는 값을 넣어주기도한다. (ref안에서 다음같이 state값이 변해도 렌더링이 일어나지 않음. state값 기록보관정도.)

(ex)
 timeout.current = setTimeout(() => {
        setStatus("now");
        setMessage("클릭하세요!");
        startTime.current = new Date();
      }, Math.floor(Math.random() * 1000) + 2000);

      setStatus("ready");
      setMessage("초록색이 되면 클릭하세요");          ===> 이부분에서 렌더링이 일어남. (ref값 안에 있는 state 변화가 렌더링되게 하려면 뒤에 state변화가 이렇게 있어야 하는건가?)

-질문-

*비구조화 할당?



(ex)  

state = 
{result:"결과",
status : "배부름", };

==> 접근할 때 { this.state.result, this.state.status } 이지만 

const {result, status} = this.state;  

==> {result}, {status} 이렇게 접근가능함. 


그러면 이렇게 ref 뒤에 state 변화가 없으면  ref안에 있는 state값은 화면에 표시가 되지 않을수도 있나요?  코드 짤 때 ref 값이 어느 위치에 있는지 신경써야 하겠네요?

setStatus("ready");
setMessage("초록색이 되면 클릭하세요");


timeout.current = setTimeout(() => {
        setStatus("now");
        setMessage("클릭하세요!");
        startTime.current = new Date();
      }, Math.floor(Math.random() * 1000) + 2000);


