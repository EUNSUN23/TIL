<286. Executing asynchronous code, action creators>

*본래 reducer는 항상 synchronous하게 동작함. 

* action creator : dispatch의 인자로 들어가는 object를 return 함.

* redux-thunk : project에 middleware를 추가해서 action creator가 action을 dispatch하는 function을 return
하도록 하는 library. --> 결과적으로는 동기적으로 작동하는 함수를 리턴하게 함. 
(그 안에 비동기함수를 넣을 수 있음.)

npm install --save redux-thunk

**where to put the logic? : Action creators vs Reducer

"I lean towards putting the logic into the reducer and not too much logic into the action
creator. Asynchronous code has to go there but once you got back the data 
from the server you might need to reach out, you can of course transform it in the action creator
and you should do that to a certain extent but once you've got data that is relatively clean, 
you should hand it off to the reducer. 
Don't put a lot of logic in one action creator, just to then have a lot of logic in another reducer. 

(받은 데이터를 state에 넘겨주기 전에 변형해야 한다면, 비동기함수가 아닌 이상
웬만하면 reducer에서 처리하라는 얘기. action creator에 너무 많은 logic 넣지 말기.
가능한 일정한 route로 처리하기. )
