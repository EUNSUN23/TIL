TIL

1. 환경변수(environment variables) : 
이 상태로 burgerbuilder라는 어플을 배포하게 되면 사용자들이 
redux devtools 통해서 store를 볼 수 있음. 별로 필요하지 않음. 

config > env.js 파일에 환경변수 이용해서 development모드일때만 redux-devtools unlock하기 
==> (index.js파일 참고)


2. Lazy loading : 비동기로 component return하는 
함수를 만들어서 App.js파일에서 라우팅 렌더링할 때 해당 라우팅 컴포넌트들이 필요시에만 
load되도록 하기. 

(사실 이렇게 작은 어플에서는 필요 없지만 공부 위해서.)


3. test

*test가 필요한 이유 : 컴포넌트가 break되거나 의도된 로직에 맞지않게 변형되었을 경우 
test에서 감지하고 해당 컴포넌트를 고칠 수 있다. 

build app => test manually in browser => automatic test => ship app to server

보통 이런 단계를 거치는데 중간에 automatic test란 app의 unit을 테스트한다. 
app의 어떤 컴포넌트가 변하거나 망가지면 이 test를 통과하지 못하고, browser 상에서 직접 찾기 전에
warning message를 받을 수 있다. 복잡한 app에서는 test가 매우 중요하다. 

test 기반 개발 앱도 있다. test를 먼저 쓰고, 그에 맞춰서 코딩하는 것. 


<testing tool>

1) test runner : executes tests and provides validation library. 
The idea behind unit tests is that they don't run in the browser. with Node.js though often emulated 
to be in a browser environment with the help of specific javascript packages.
test runner is the core tool which simply executes our code using that environment. 
And the good thing is that creat-react-app already comes with a pre-configured testing environment we
can build up on. 

** Jest: a popular javascript testing tool which is not limited to react but also often used in react apps. 
Jest is already installed in the app created with create-react-app. 


작동원리 : When testing reacting components, we also need a way of emulating these components,
so basically mounting tehm to some non-existent dom you could say and then traversing our components. 
And we want to do this in an efficient quick way without having to actually create that whole component
tree which might also introduce some side-effects. 


3) testing utility 

For this, we need testing utilities which help us with testing and there, we specifically need help to 
simulate the react app, moount components and dig into that dom which is created with react. 

In this course, we could use react-test-utils which is the official utility tool but there's another tool
which becomes more an more important and interesting and is also suggested by the react team 
and that's enzyme. 


** enzyme : enzyme is a tool developed by Airbnb. they use react in a lot of their projects and they
share this tool which makes it easy to mount components and then navigate through them. 

4) What should we test?

테스트 작성법 제대로 배우려면 아예 course를 따로 들어야 할정도로 복잡하고 시간도 들여야 한다. 
뭐를 테스트할건지도 그런 지식 기반위에 세워져야 하는것. 

*테스트 하지 않아도 되는 것들*

libraries : react redux or axios 등 이미 test된 라이브러리 자체들 ^^.

too complex connections : 한 컴포넌트에서 다른 컴포넌트로 props가 넘어가서 동작하는 등의 복잡한
것은 test하지 않아도 된다. 한 컴포넌트 내에서 렌더링이 일어나거나 props가 변하거나 하는 것 test하기. 


*테스트 필요한것들*
isolated units, conditional outputs (what happens if some property changes in your component?
does that out-put correctly? etc)



4) create-react-app으로 만든 app testing 하기 

- npm install --save enzyme react-test-renderer enzyme-adapter-react-(react version)

- (Navigation.test.js 파일 참고) test파일 작성, npm run test (혹은 npm test)

5) Jest & Enzyme documentation 

각종 test 작성할 때 공식문서 참조하기. 


