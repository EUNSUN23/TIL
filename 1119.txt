<setAttribute로 css주는법>
*3기 Han*


render() {
    const displayStyle = this.visible ? "block" : "none";
    this.$loading.innerHTML = this.visibleMessage;
    this.$loading.setAttribute("style", `display:${displayStyle}`);


<이벤트 위임&바인딩, type으로 분기>

  constructor({ $target, data }) {
    const $imageInfo = document.createElement("div");	    const $imageInfo = document.createElement("div");
    const loading = new Loading({ $target: $imageInfo });
    $imageInfo.className = "ImageInfo";	    $imageInfo.className = "ImageInfo";
    this.$imageInfo = $imageInfo;	
    $target.appendChild($imageInfo);	    $target.appendChild($imageInfo);


    this.$imageInfo = $imageInfo;
    this.loading = loading;
    this.data = data;	    this.data = data;
    this.close = this.close.bind(this);

    document.addEventListener("click", this.close);
    document.addEventListener("keyup", this.close);


    this.render();	    this.render();
  }	  }

  close(e) {
    if (e.type === "click") {
      const { className } = e.target;
      if (className === "ImageInfo" || className === "close") {
        this.setState({ visible: false, info: null });
      }
    } else if (e.type === "keyup") {
      if (e.keyCode === 27) {
        this.setState({ visible: false, info: null });


<async & await >

const API_ENDPOINT = "http://localhost:4001";

const REQUEST_ERROR = {
  500: { msg: "요청실패" },
};

/*fetch를 return하는 함수를 만들어서 api object의 중복제거.*/

// const request = (url) => {
//   //url:endpoint정보
//   try {
//fetch 자체가 return 되어야 함.
//     return fetch(url).then((res) => {
//
//       return res.json();
//     });
//   } catch (error) {
//      return에서 에러가 났을 때 catch문 실행.
//    }
//
// };
// const api = {
//   fetchCats: keyword =>{
//     return request(`${API_ENDPOINT}/api/cats/search?q=${keyword}`);
//   }
// }

/* async, await 이용 */

const request = async (url) => {
  try {
    const foundData = await fetch(url);
    //console.dir(foundData) ==> header, body(데이터 정보), status(200,404..등)정보 볼 수 있음.
    if (foundData.status === 200) {
      return foundData.json();
    } else {
      //throw로 200(성공)이 아닐 시 catch에 error 전달
      throw REQUEST_ERROR[foundData.status];
    }
  } catch (error) {
    console.log(error);
    alert(error.msg);
    return { data: null };
  }
};

const api = {
  async fetchCats(keyword, page) {
    try {
      const foundData = await fetch(
        `${API_ENDPOINT}/api/cats/search?q=${keyword}&page=${page || ""} `
      );
      foundData.json();
      if (foundData.length <= 0) {
        LoadingMessage.setLoadingMessage(false);
        App.setModal(true);
      } else {
        LoadingMessage.setLoadingMessage(false);
        App.setState(foundData);
        KeyStorage.storeKey(keyword);
        KeyStorage.paintKey();
        App.setModal(false);
      }
    } catch (error) {
      console.log(error);
    }
    // if (data.length <= 0) {
    //   this.loadingMessage.setLoadingMessage(false);
    //   this.setModal(true);
    // } else {
    //   this.loadingMessage.setLoadingMessage(false);
    //   this.setState(data);
    //   this.keyStorage.storeKey(keyword);
    //   this.keyStorage.paintKey();
    //   this.setModal(false);
    // }
  },

  async fetchRandomCats() {
    try {
      const randomData = await fetch(`${API_ENDPOINT}/api/cats/random50`);
      randomData.json();
      App.setState(randomData);
    } catch (error) {
      console.log(error);
    }
  },

  async fetchCatsInfo(id) {
    try {
      const catInfo = await fetch(`${API_ENDPOINT}/api/cats/${id}`);
      catInfo.json();
      ImageInfo.setOrOffImage({ visible: true, catInfo });
    } catch (error) {
      console.log(error);
    }
  },
};


<테스트 작성>

각 컴포넌트 내부에 있는 함수들, util 함수들 테스트. 프론트엔드의 특성상 이 테스트만으로는 앱을 완전히
점검할수는 없다. 

테스트를 쓸 때에는 이중확정자를 씀. 

validator.test.js

-jest 깔아야 frontend에서 npm run test 이렇게 할 수 있음(pacakge.json참고)


<ex>

uniqueArray.test.js 파일..

import uniqueArray from '../utils/uniqueArray.js';

describe('uniqueArray.js', ()=>{
test('중복 제거 확인', () => {
expect(uniqueArray([0,1,1]).toStrictEqual([0,1])

//reference타입 검사는 toStrictEqual. boolean타입 검사는 false. 

 }


*동영상 : 프론트엔드에서 TDD가 가장 쉬웠어요 


최근검색어가 있는 상황에서 랜덤고양이를 가져오면
그걸 다시 불러올때
데이터는 랜덤고양이인데
키워드는 최근검색어가 되는 상황이
있지 않을까해서요
나로부터 모두에게:  08:45 PM
아 그렇군요
넵!
[3기] 이다영에서 모두에게:  08:45 PM
맞습니다 저장된 recentkeyword로 쿼리를 날리면 거기서 코드가 꼬여서 저는 keyword로 수정하rh 랜덤키워드시 옵저버 동작을 막았습니다

랜덤버튼 누를 때 검색 키워드 초기화하기. 