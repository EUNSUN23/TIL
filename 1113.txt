-배운것-

<REST API>


What is REST?

- Representational State Transfer

- Architecture style for designing networked applications

- Relies on a stateless, client-server protocol, almost always HTTP

(HTTP : everytime you load a webpage in your browser, it's making an HTTP request to a server
somewhere. it is possible to use other protocols with REST, but HTTP is by far the most used because
 in order to use  real world REST, you need the delievery methods that HTTP offers. 

- Treats server objects as resources that can be created or destroyed

- Can be used by virtually any programming language. 

<HTTP Methods>

GET :  Retrieve data from a specified resource

POST : Submit data to be processed to a specified resource

*form tag in HTML can take an action and a method(post/get. get은 안전하지 않음.)

PUT : Update a specified resource. endpoint에 request보낼 때 어떤 resoure를 update할지 식별할 id도 함께 보냄.  

(ex: https://mysite.com/api/users/1)

DELETE : Delete a specified resource. request에 삭제할 resource를 식별할 id도 함께 보낸다. 

(ex: https://mysite.com/api/users/1)

*드물게 쓰는 methods*

HEAD : Same as get but does not return a body in response. it only returns HEAD info. 

OPTIONS : Returns the supported HTTP methods. see the supported methods of server. 

PATCH : Update partial resources 


<Endpoints>

Enpoints are the URI or the URL that our HTTP requests are sent to.


<Authentication>

Thers' a few way of authenticaiton is implemented. Usually you'll use Auth which involves getting some kind of
access token and sending that along with your request. If you attempt to make a request without that, 
you will get some kind of 'unauthorized' error. 


(ex : 

curl -H "Authorization: token OAUTH-TOKEN"https://api.github.com

* 'curl' is basically a tool that we can use to transfer data using multiple protocols including HTTP. 

So the example above is by sending the token inside the HTTP HEADER. You can include value 
for authorization if you set that to your token. 



<Pagination>

1. Define partition style

2. Support default values

3. Provide navigational links 

: Partitioning Response Data

* Page Size determined by server 
:클라이언트사이드에서 page=2 이런식으로 정보를 request를 보내면 해당하는 만큼의 아이템을 서버에서 보내준다.

* Page Size determined by client
: user가 page size를 결정하는 방식.  '3 items per page' 이런 식으로 브라우저에 따로 ui를 만들어서
user가 page size를 조절할 수 있도록 함. api리퀘스트에 page rank parameter를 보낸다. (page =2, page size = 20)

if you want to give your consuming applications additional control over partitioning, you can use
an offset scheme. An offset scheme allows the application to indicate the starting item and the number of items it wants 
to receive in result. 

*Additional pagination properties : 
some API support a sorting property and that lets apps determine how data will be sorted
before it's chopped into pages. 


<what if a user requests a page and doesn't provide any pagination instructions? 

-the best approach is use default value in abscense of any page instructions. 

Default values when no properties provided + Pagination request properties for flexibility 

just like human users, application can navigate through these pages. To make navigation easier, 
you need to provide meta-data with each page response. this includes things like the number of pages 
or items available, the last time it was updated... 

in addition to those datas, providing links to other page within the data set will make it easier for
consumers to navigate through API. 
 






-질문-