-배운것-


*CMD (명령 프롬프트) 사용해서 로컬저장소, 원격저장소 만들고 파일 ADD, COMMIT, PUSH하기. 혹은 PULL하기. 

*진입점 함수 찾기* 

다른사람 코드 분석할 때에는 진입점 함수를 찾고 분석해 올라간다. 다른 코드들은 접어두고 진입점 함수부터 찾기.

ex : 초기세팅();  --> 초기세팅 안에 들어있는 함수들 --> 그 안의 함수들..


*리액트 등의 프레임워크를 쓰는이유*

데이터-화면 연동시, 자바스크립트는 바뀐데이터에 따라 알아서 화면이 재구성되게 하지 못하기때문에  
개발자가 직접 데이터가 바뀔때마다 전체 화면이 새로고침되게끔 코드를 짜야한다. 
(일일이 화면과 데이터가 연결되게끔 코드를 짜야한다.)

*자바스크립트의 가장 큰 숙제는 비동기 인터렉션을 해결하는 것(사용자 ui가 많으면 비동기 함수처리를 많이 하게됨).
보통 if문으로 분기처리하는 것이 불가능해지면서 RX자바스크립트 등을 사용하게된다.



*깃(git) - 혼자작업할때 

폴더 만들고 cmd 명령어로 접근해서, 혹은 vscode 안에서(컨트롤 역따옴표). 
git init -> 이 폴더가 깃 관리하에 들어감. .git파일 생성

소스트리 -> 작업중인 폴더 선택해서 .git파일 생성


git status -> git상태. untracked된 파일은 없는지.. 
git -A  -> 모든것 타임캡슐에 묻기
git commit -m "커밋명" -> 타임캡슐 커밋 
git push -
git log -> 타임캡슐 히스토리보기. 

<과거시점으로 돌아가기>

git reset '돌아갈 시점' 여섯자리일련번호(git log로 확인) --hard -> 이 시점으로 파일 돌림. 다시 미래로 갈수없음.
소스트리 : 우클릭, 이 커밋까지 초기화 선택, 옵션에서 hard선택 
--> 히스토리에서 이 커밋 이후 기록들은 사라짐. 

git revert '취소할 시점' 여섯자리일련번호(git log로 확인) / :wq 입력 
-> 취소하고 과거로 파일상태 돌아가지만 히스토리는 남아있음. '취소'한 커밋이 새로 생성. 
-> reset으로 다시 미래로 돌아갈 수 있음

소스트리 : 커밋되돌리기

<평행우주 만들어 이동하기 : branch>

-새 분기 만들기, 다른 분기로 이동하기
git branch 브랜치명 -> 현시점에 '브랜치명'이라는 또다른 분기를 만든다.
git checkout 브랜치명 -> '브랜치명'으로 넘어간다 

소스트리 : 상단의 브랜치버튼 클릭, 브랜치만들기. 이동하려면 브랜치 더블클릭 

-병합
git merge 병합할분기이름 -> 현재 분기에 다른분기 병합. add,commit 자동으로 이뤄짐
git log --graph --all --decorate -> 분기들에서의 작업내용을 시각화해서 확인가능

소스트리 : 병합할분기 우클릭, 병합하기 -> 마찬가지로 작업내용 시각화해서 확인가능 

-충돌(conflict) 
: 같은 파일을 각각다른 브랜치가 다르게 수정하고 이들을 병합하려고 하면 충돌문제가 생김.
git이 자동 add를 거부함. 없앨 부분 없애고 add, commit, :wq 입력.(알아서병합해줌)

*가능한 다른 브랜치들이 같은 파일 수정하는 일을 피한다. 

-재배치
git rebase -> 병합 내용 복잡할 때 여러 분기별내용들 한줄로 깔끔하게 정리 
 
소스트리 : 우클릭 재배치

-브랜치 삭제 
git branch -D 브랜치명 
소스트리 : 우클릭 없애기 


*깃헙 - 협업, 내 파일 올리고 다른사람파일 받기 / 깃랩, 깃버킷 등도 있음

-원격 저장소 만들기
깃헙 페이지에서 새 리퍼지토리만들기 (public, private) 
 레퍼지토리 url얻음 / 원격 레퍼지토리 지정(git remote add origin 레퍼지토리url), 레퍼지토리로 지금 분기의 현폴더에 커밋된 내용을 push하기(git push -u origin(원격레퍼지토리명) master(브랜치명))
소스트리 : 저장소클릭, 원격저장소 추가, url 복붙, 유저네임 

git push origin(원격저장소이름) master(브랜치명) -> 커밋된 내용 원격저장소로 push
git remote : 현 폴더의 원격레퍼지토리 확인

-로컬 저장소 만들기 


- 숨김파일만들기

프로젝트폴더 제일 최상위공간에 .gitignore 파일 생성(vscode상에서)
숨길 파일명을 .gitignore 안에 적고 저장 , add, commit

-git 소스 받기 

*프라이빗은 설정 통해서 특정 사람들만이 드나들수있게함.

깃헙레퍼지토리 download or clone 버튼 클릭 -> 터미널에 git clone 복사한 주소

git log => 프로젝트 내역까지 그대로 복사한것을 확인할수있음.
소스트리 : 클론 클릭해서 진행

//커밋메세지는 어떤 변화가 있었는지 팀원들간 소통하는 수단이됨  검색: 커밋메세지 작성법

- 다른사람이 새로 올린내역 확인하기 
git fetch, git status => 다운받아야할 상황있는지 확인 
git pull 원격명 브랜치명 => 커밋내역까지 동기화해서 받을수있음

소스트리 : fetch 클릭, 모든 저장소에서 받아오기 설정 
pull 눌러서 github에서 받아오기 

뭐든 작업하기 전에 pull 먼저 하기. 변경된 내용 다 pull 하기 전에는 내 쪽에서 push 할 수 없음. 

-원격에서 branch 다루기 

*git checkout -b 브랜치명 : 브랜치 새로 만들고 checkout 하기 

로컬저장소 커밋한 내용을 원격의 새 브랜치 만들어서 push 하기 : git push 원격이름 브랜치명 

git branch -a : 원격의 브랜치까지 다 보기. 
git fetch : github 상태 파악

소스트리 : 원격 origin 클릭, 우클릭으로 체크아웃, 로컬에 같은 이름으로 브랜치 만들기 체크
git push -d 원격명 브랜치명 -> 원격 브랜치 지우기 











-질문-