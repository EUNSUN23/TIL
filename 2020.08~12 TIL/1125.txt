


API Overview
Our API is available for everyone to use. A TMDb user account is required to request an API key. 
Professional users are approved on a per application basis.
TMDb 유저는 api key를 요청함으로써 api사용 가능, pro유저는 어플리케이션마다 사용가능(그때그때마다 key요청은 안해도 되는듯?)

As always, you must attribute TMDb as the source of your data. Please be sure to read more about this here.

Logos & Attribution
As per our terms of use, every application that uses our data or images is required to properly attribute TMDb as the source. 
Below you will find some logos you can use within your application. 
We've also included some basic brand guidelines.

Does the API key cost anything?
Our API is free to use as long as you attribute TMDb as the source of the data and/or images. 
However, we reserve the right to charge for the commercial API key in the future.

--> TMDb사용하는 유저는 어플리케이션에 TMDb사용했다는 표시(?) 저작권 표시를 해야하는듯. 
(상업용 목적이 아니라면 이 저작권표시 해주기만 하면 무료로 api사용가능)

API Documentation
To view all the methods available, you should head over to developers.themoviedb.org. 
--> TMDb에서 제공하는 api methods. 

What is TMDB's API?
The API service is for those of you interested in using our movie, TV show or actor images and/or data in your application. 
Our API is a system we provide for you and your team to programmatically fetch and use our data and/or images.

--> TMDb: 각종 영화, tv show이미지, 데이터 제공하는 api. 

API Sessions
In order for users to write data to their account via the API, we have created a user specific authentication workflow. 
Upon being completed successfully, the session id that is created can be used to do things like rate movies, 
add or remove items to a personal watchlist, and also create and edit lists.

Please consult the official API documentation for more information.




*********어플리케이션 url???




static 폴더 : 
static-file은 image, video, sound와 같이 파일 자체를 말한다.
서버에 저장된 static-file의 url을 프론트에서 사용하기 위해 static-file-folder를 설정해보자.
<img src=URL />를 통해 이미지를 HTML문서에 넣었다면 이미지의 경로를 작성해야 하는데, 
이 URL를 static-file-folder의 경로가 된다.
static-file-folder에 대한 설정 없이 서버에 저장된 파일의 경로를 클라이언트에서 사용한다면?
만약 파일이 이미지라면, 해당 url을 서버로 요청하지만, 서버에서 파일경로를 찾지못해 404 not found 응답과, 이미지-엑박을 출력한다.

*sass

CSS Preprocessor 란?
HTML, CSS를 다루는 분이라면 한 번은 들어봤을 Sass, Less 등이 있습니다.
이 친구들은 CSS 전(예비)처리기 입니다.
보통 CSS Preprocessor 라고 부릅니다.

CSS가 동작하기 전에 사용하는 기능으로,
웹에서는 분명 CSS가 동작하지만 우리는 CSS의 불편함을 이런 확장 기능으로 상쇄할 수 있습니다.

사스는 기초 언어에 힘과 우아함을 더해주는 CSS의 확장이다.

어떻게 사용하나요?
위에서 언급한 것처럼 웹에서는 CSS만 동작합니다.
Sass, Less, Stylus 같은 전처리기(이하 ‘전처리기’로 표기)는 직접 동작시킬 수 없습니다.
그렇다면 어떻게 사용할 수 있을까요?

CSS는 불편하니 일단 배제하고 우선 전처리기로 작성(코딩)합니다.
전처리기는 CSS 문법과 굉장히 유사하지만 선택자의 중첩(Nesting)이나 조건문, 반복문, 다양한 단위(Unit)의 연산 등… 
표준 CSS 보다 훨씬 많은 기능을 사용해서 편리하게 작성할 수 있습니다.
단, 웹에서는 직접 동작하지 않으니 이렇게 작성한 전처리기를 웹에서 동작 가능한 표준의 CSS로 컴파일(Compile)합니다.
전처리기로 작성하고 CSS로 컴파일해서 동작시키는 거죠.

컴파일은 어떻게 하나요?
전처리기 종류마다 방법이 조금씩 다르고 여러 방식을 제공합니다.
보통의 경우 컴파일러(Compiler)가 필요합니다.

Sass와 SCSS는 차이점은 뭔가요?
Sass(Syntactically Awesome Style Sheets)의 3버전에서 새롭게 등장한 SCSS는 CSS 구문과 완전히 호환되도록 새로운 구문을 도입해 만든 Sass의 모든 기능을 지원하는 CSS의 상위집합(Superset) 입니다.
즉, SCSS는 CSS와 거의 같은 문법으로 Sass 기능을 지원한다는 말입니다.

더 쉽고 간단한 차이는 {}(중괄호)와 ;(세미콜론)의 유무입니다. Sass는 선택자의 유효범위를 ‘들여쓰기’로 구분하고, SCSS는 {}로 범위를 구분합니다.

컴파일 방법
Sass(SCSS)는 웹에서 직접 동작할 수 없습니다.
어디까지나 최종에는 표준 CSS로 동작해야 하며, 우리는 전처리기로 작성 후 CSS로 컴파일해야 합니다.
다양한 방법으로 컴파일이 가능하지만 자바스크립트 개발 환경(Node.js)에서 추천하는 몇가지 방법을 소개합니다.

SassMeister
간단한 Sass 코드는 컴파일러를 설치하는게 부담될 수 있습니다.
그럴 경우 SassMeister를 사용할 수 있습니다.

페이지 접속 후 바로 Sass나 SCSS 문법으로 코딩하면 CSS로 실시간 변환됩니다.
HTML를 작성하여 적용된 결과를 보거나 Sass 버전 설정 등 여러 환경 설정들을 지원하니 학습에 도움이 될 것입니다.

node-sass
node-sass는 Node.js를 컴파일러인 LibSass에 바인딩한 라이브러리 입니다.
NPM으로 전역 설치하여 사용합니다.

$ npm install -g node-sass
컴파일하려는 파일의 경로와 컴파일된 파일이 저장될 경로를 설정합니다.
[]는 선택사항입니다.

$ node-sass [옵션] <입력파일경로> [출력파일경로]
$ node-sass scss/main.scss public/main.css
여러 출력 경로를 설정할 수 있습니다.

$ node-sass scss/main.scss public/main.css dist/style.css
옵션을 적용할 수도 있습니다.
옵션으로 --watch 혹은 -w를 입력하면, 런타임 중 파일을 감시하여 저장 시 자동으로 변경 사항을 컴파일합니다.

$ node-sass --watch scss/main.scss public/main.css
기타 옵션은 node-sass CLI에서 확인할 수 있습니다.

<sass 설명>
https://heropy.blog/2018/01/31/sass/


<redux-promise vs redux-thunk>

redux-thunk allows your action creators to return a function :

function myAction(payload){
    return function(dispatch){
        // use dispatch as you please
    }
}

redux-promise allows them to return a promise :

function myAction(payload){
    return new Promise(function(resolve, reject){
        resolve(someData); // redux-promise will dispatch someData
    });
}

myAction.then(v => console.log())

If you use promises, you can use async/await with action creators

When life is simple, and you're just doing basic async work with creators that return a single promise, 
then redux-promise will improve your life and simplify that, quick and easy. 

But, life gets more complex when:
Maybe your action creator wants to produce several promises, which you want to dispatch
 as separate actions to separate reducers?
Or, you have some complex pre-processing and conditional logic to manage, 
before deciding how and where to dispatch the results?

You'll likely want/need both together in your app. Start with redux-promise for routine promise-producing async tasks and then scale up to add Thunks (or Sagas, etc.) as complexity increases:

When life is simple, and you're just doing basic async work with creators that return a single promise, then redux-promise will improve your life and simplify that, quick and easy. (In a nutshell, instead of you needing to think about 'unwrapping' your promises when they resolve, then writing/dispatching the results, redux-promise(-middleware) takes care of all that boring stuff for you.)
But, life gets more complex when:
Maybe your action creator wants to produce several promises, which you want to dispatch as separate actions to separate reducers?
Or, you have some complex pre-processing and conditional logic to manage, before deciding how and where to dispatch the results?
In those cases, the benefit of redux-thunk is that it allows you to encapsulate complexity inside your action-creator.

But note that if your Thunk produces and dispatches promises, then you'll want to use both libraries together:

the Thunk would compose the original action(s) and dispatch them
redux-promise would then handle unwrapping at the reducer(s) the individual promise(s) generated by your Thunk, 
to avoid the boilerplate that entails



<swiper.js>
https://blog.naver.com/awspro/221933561120
swiper.js (스와이퍼)는 멀티디바이스 환경에 걸맞게 스와이프와 반응형 처리가 모두 가능한 슬라이더 라이브러리 입니다.
[출처] swiper.js 스와이퍼 javascript 라이브러리로 스와이프 가능한 슬라이드 쉽게 만들기|작성자 AWSPRO


터미널을 실행하고 프로젝트 폴더에서 아래의 명령으로 설치 가능합니다. 

$ npm install swiper
npm 설치되어있어야 하며 node_modules 폴더에 라이브러리들이 저장되어 package.json 파일을 통해 관리되겠죠. 

또는 github 를 통해 원하는 버전을 다운로드 받아 프로젝트 폴더에 직접 넣어 사용해도 되겠습니다. 

https://github.com/nolimits4web/swiper/releases

​

​

하지만 굳이 설치하지 않고 CDN 주소를 통해서 사용가능한데요,  아래와 같이 스와이퍼를 실행할 파일 상단에는 css 를, 하단에는 js 파일을 삽입 하면 최신버전을 로딩시켜줍니다.

<head>
<link rel="stylesheet" href="https://unpkg.com/swiper/css/swiper.min.css"> 
</head>

.......

<script src="https://unpkg.com/swiper/js/swiper.min.js"></script>
</body>
압축하지 않은 라이브러리 파일을 사용하고자 한다면 아래의 코드를 사용하면 됩니다.

<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css">

<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
[출처] swiper.js 스와이퍼 javascript 라이브러리로 스와이프 가능한 슬라이드 쉽게 만들기|작성자 AWSPRO



<debounce>
-설정시간이 지날 때 까지 keyup이벤트를 delay시켜준다. (즉 매 타이핑마다 api 호출이 일어나지 않고
타이핑 다 끝난 후에 api호출이 일어나도록 함)
https://levelup.gitconnected.com/debounce-in-javascript-improve-your-applications-performance-5b01855e086

The debounce function delays the processing of the keyup event until the user has stopped typing for a predetermined amount of time.
This prevents your UI code from needing to process every event and also drastically reduces the number of API calls 
sent to your server. Processing every character as it’s entered could harm performance and add unnecessary load to your backend.