-리액트-

*구구단 만들고 webpack으로 빌드하기*
<webpackg.config.js / entry, module, output>

1. 바벨이 호환시킬 브라우저 버전설정
webpack.config.js > modules>rules>options>presets> 안에 target 집어넣어서 바벨이 호환시켜주는 
브라우저 버전 설정할수있음. 

--> browserslist 라는 웹사이트에서 target 안에 넣을 말 찾을 수 있음. (last 2 chrome browsers 등)


2. 추가 plugin 붙이기(module 안에 있는 plugin 아님*)

module의 rules외에 다른 것 붙이고 싶으면 별도의 plugins 배열 만들어서 그 안에 넣어주면 된다.

3. webpack에서 알아야할 5가지 : loader(module-rules), entry, output, 
mode(development/production), plugins(추가적으로 하고 싶은 작업) 


webpack.config.js 작성 순서> 기타(이름,mode, resolve) - entry - module, plugins - output

const path = require("path");

module.exports = {
  name: "GuGudan",
  mode: "development", //실서비스에서는 production으로 바꾸기.
  devtool: "eval", // 실서비스에서는 "hidden-source-map"
  resolve: {
    extensions: [".js", ".jsx"],
  },
  entry: {
    app: ["./client"],
  },
  module: {
    rules: [
      {
        test: /\.jsx?/,
        loader: babel - loader,
        options: {
          presets: [
            "@babel/preset-env",
            { targets: { browswers: ["last 2 chrome versions"] }, debug: true },
            "@babel/preset-react",
          ],
          plugins: [],
        },
      },
    ],
  },
  output: {
    path: path.join(__dirname /*현재폴더*/, "App"), //현재폴더 안에 dist를 자동으로 만들어줌.
    filename: "app.js",
  },
};


4. git ignore

node_modules => node_modules 디렉토리를 무시한다. 즉, 하위 모든 리소스를 무시한다.
app/dist/* => app 디렉토리 안의 dist 디렉토리의 하위 모든 리소스를 무시한다.
*.log => 모든 log 파일들을 무시한다.



*은 모든 것을 의미한다.

*.log 라면 a.log, b.log, c.log 모두 포함한다는 뜻이 된다.


출처: https://mygumi.tistory.com/209 [마이구미의 HelloWorld]

5. react에서 input쓸 때 주의사항

*react에서 input에 onChange랑 value 세트로 쓰거나,  defaultValue = {this.state.value} 넣어주기.

6. 수정때마다 npm run dev 하지 않는법(자동 build하는법): 

1) 
npm i -D react-hot-loader
npm i -D webpack-dev-server 

--> 설치하고, package.json 파일> script > "dev" : "webpack" > "dev" : "webpack-dev-server"


*내 컴퓨터가 하나의 서버가 되어서 프론트엔드 프로그램을 돌릴수있게끔한다. (dev-server에 서버에 변경사항들 저장됨)
(http://localhost:8080/ 라는 주소 얻음.)

2) 
const { hot } = require("react-hot-loader/root");

const Hot = hot(WordRelay);  

ReactDom.render(<Hot />, document.querySelector("#root")); 

-->hot(파일명) 이 대입된 매개변수 넣어줌.

plugins: [
            "@babel/plugin-proposal-class-properties",   
            "react-hot-loader/babel",
          ],

 --> config파일에서 플러그인에 "react-hot-loader/babel" 추가

<script src="./app.js"></script>

--> dev server가 app.js파일을 직접 다루기 때문에 html의 js경로 수정해주기. 
//*****내껀 수정하지 않아야지 작동함. 


*단, webpack.config.js 파일을 수정하면 서버를 다시 재실행해줘야한다.

7. console 용어
*알아두면 디버깅할때 유용
HMR -> hot module reload --> 어떤 컴포넌트가 바뀌어서 변경사항으로 올라가는지 알려줌

WDS -> webpack dev server --> hmr 변경사항을 받아서 업데이트하는 내역 알려줌 

8.
import 와 require

require : 노드의 모듈시스템. 
import :es2015문법.

import 쓰는 경우가 많기때문에 require, import 둘다 알아두는 것이 좋음. (책을 참고하자,....)

9.

옛날코드 남겨둬야 하는 이유 : 대부분 예전세팅을 이용해서 코딩하기 때문에. 한 프로젝트 하면 그 프로젝트 세팅이 또 쓰이고...
하다보면 create-react-app 안 쓸수도 있음. 