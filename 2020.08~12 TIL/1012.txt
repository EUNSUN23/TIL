-배운것-


<215. Loading routes lazily>

<*Blog.js 파일>

import asyncComponent from '../../hoc/asyncComponent'

const AsyncNewPost = asyncComponent(()=>{
  return import("./Blog/NewPost/NewPost");
});

--> the asyncComponent function will return dynamic import syntax which means whatever
comes between the paretheses here is only imported when that funciton here is
executed and that fucntion here will only be executed once we render AsyncNewPost
to the screen. 

        <Switch>
          {this.state.auth ? <Route path="/new-post" component={AsyncNewPost} /> : null}
          <Route path="/posts/" component={Posts} />
          <Route render = {()=><h1>Not found</h1>}/>
          {/*<Redirect from ="/" to = "/posts"/>*/}
          
        </Switch>

Eventually AsyncNewPost will be a component because it returns a component.
whilst webpack(?) bundle our codes, it detects the dynamic syntax(return import("./Blog/NewPost/NewPost");),
so it creates extra bundle with NewPost component and all potentail child components that were 
exclusive to that component if any. but it doesn't add to the main bundle. Instead, it's prepared to 
load it when we actually include AsyncNewPost which we only do when navigating to "/new-post".

This is how you load routes asynchronously. And this is extremely useful in bigger apps where
there are bigger chunks of code, a whole featurea area in your application for example, which 
might not even be visited by the user so you can save that code up front to only load it when needed. 


<216. Lazy loading with React Suspense(16.6)>

if you're using the latest react version (16.6.0 or higher), then you have a new way of lazy loading your routes 
because react 16.6.0 adds a new method on the react object, the lazy method which you can use to load your
component asynchronoulsy. 
It is not just useful for the routing by the way. Whenever you have a use case where some component is loaded
at a later point of time for example, because you have a 'if'check and some condition needs to be met to
render a certain component in all such cases you could use react lazy. 



class App extends Component {
  render() {
    return (
      <BrowserRouter>
        <React.Fragment>
          <nav>
            <NavLink to="/user">User Page</NavLink> |&nbsp;
            <NavLink to="/posts">Posts Page</NavLink>
          </nav>
          <Route path="/" component={Welcome} exact />
          <Route path="/user" component={User} />
          <Route path="/posts" component={Posts} />
        </React.Fragment>
      </BrowserRouter>
    );
  }
}

(*위의 User Page와 Posts Page가 필요할 때만 load되도록 하는 법)

- Suspense, React.lazy 사용해서 컴포넌트가 특정 조건에서만 load되도록 하기. 

import React, { Component, Suspense } from 'react';

const Posts = React.lazy(()=>
  import("./containers/Posts")
)

class App extends Component {
  state = {showPosts:false}

  modeHandler = () => {
    this.setState((prevState)=>{
      return {show:!prevState.showPosts}
    })
  }
  render() {
    return (
      <>
      <button onClick = {this.modeHandler}>Toggle Mode</button>
      {this.state.showPosts ? (<Suspense fallback = {<div>Loading...</div>}>
        <Posts />
        </Suspense>) : <User/>}
      </>


<217.Routing and Server Deployment>

You have to remember how handling requests actually work in the web. 

[user] => [sever] (handle requests first) => [React App] (knows the routes)

The thing is before we load to index.html page, the server needs to find out which page the user actually wanted to visit. 
That of course is the case because the server always handles requests first. this is how the internet works. 
The problem is, it's the react app which knows the routes. So if we visit "/posts", there is no "/posts" route on 
our sever, that is defined in the javascript code which is loaded on the index.html page which we never
get because we get a 404 error on the sever because we tired to visit a route which is unknown to the server. 
And cleary this is not what you saw during development because as I said the development server is already 
configured correctly. 

We have to configure the server in a way that it always forwards requests no matter if it understands 
them or not, so also 404 error requests to the client, so that it always returns the index.html page, also 
for unknown requests becaus this then allows react to take over and parse the request against the 
routes it knows. So we always load index.html

And if then there is a request we don't know, well you learned how to handle 404 errors with the react router. 

<Setting the base path for the react router when hosting your app>

There is another thing you have to be aware of when hosting your app on your server, if you are hosting it
on let's say example.com/, so if that's the page with which we're landing on the root page of you react app,
you don't need to set up anything special. 
But if you're serving your app from let's say example.com/myapp, so anything beneath that folder should be
your react app, you need to tell react about this, the react router to be precise. 
So whenever you are serving your app from a sub-directory, make sure to set basename. 

--default basename--

class App extends Component {
  render() {
    return (
      <BrowserRouter basename = "/">  --> this is the default that you don't need to set. 
        <div className="App">
          <Blog />
        </div>
      </BrowserRouter>
    );
  }
}

export default App;

--configuration--

<BrowserRouter basename = "/my-app">  
        <div className="App">
          <Blog />
        </div>
      </BrowserRouter>

--> If you're serving app from "my-app", you should set this to "/my-app", then all your reqeusts are
routed against myapp/ and then the link you're pointing to. 


<221. buidling the checkout component>

* container가 되는 컴포넌트 : a component which manages its own state and also passes
this down to other components. (고유의 스테이트를 관리하고 이것을 다른 컴포넌트에게 전달하는 컴포넌트)


*browserRouter에 다이렉트로 wrapped되어있는 컴포넌트만 route area가 된다. (history,match등의 props를 
전달받는건 직접적으로 라우팅 되는 컴포넌트.)


-직접적으로 라우팅 되는 컴포넌트 외 다른 컴포넌트에도 history 등의 props 전달하는법

<*Burger.js 파일>

import {withRouter} from 'react-router-dom';

export default withRouter(burger);

--> Burger.js에 history와 가장 최근에 match되었던 페이지의 location, match등이 props로 전달됨. 


<224. Navigating Back & to Next page>

this.props.history.replace({}); --> Navigating to the next page
this.props.history.goBack() --> Navigating Back

<225. Passing Ingredients via query params>


(*BurgerBuilder.js 파일)

const queryParams = [];
    for(let i in this.state.ingredients){
      queryParams.push(encodeURIComponent(i) + '=' + encodeURIComponent(this.state.ingredients[i])); //Javascript method which encodes my elements so that they can be used in the URL
    }
    const queryString = queryParams.join('&');

    this.props.history.push({
      pathname:'/checkout',
      serach : '?' + queryString//pass the ingredients  
    });

--> query params로 ingredients 전달

(*Checkout.js 파일)


  componentDidMount(){
        const query = new URLSearchParams(this.props.loaction.serach);
        const ingredients = {};
        for(let param of query.entries()){
            //['salad','1]
            ingredients[param[0]] = +param[1]
            this.setState({ingredients:ingredients});
        }
    }


<227. Order Submission & Passing Data between pages>

-checkout.js에서 contactdata.js로 ingredient data 보내기

* component 대신 render를 아래와 같이 사용하면 props를 보낼 수 있다. 

<Route path = {this.props.match.path + '/contact-data'} 
          render = {() => (<ContactData ingredients = {this.state.ingredients}/>)}/>
