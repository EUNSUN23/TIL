-배운것-


*렌더링 화면에 하이라이트로 표시해서 파악하기(크롬 디버거)
: profiler -> profiling record (새로고침해서 동작 녹화하기) -> 설정-> 하이라이트 등 설정 -> 다시 실행
(아마도...)

<lotto_ hooks> : 제로초 6-5~6-6

---useMemo, useRef---

useMemo : 복잡한 함수 다시 실행되지 않고도 리턴하는 결과값을 기억한다.

const lottoNumbers = useMemo(()=> getWinNumbers(), [])    

 ==> []안에 값이 바뀌지 않는 한 getWinNumbers가 다시 실행되지 않는다.
        return값은 lottoNumbers에 저장.

useRef vs useMemo )) useRef는 일반값을 저장, useMemo는 복잡한 함수값을 저장.

(ex) useRef

const timeouts = useRef([]);

 for (let j = 0; j < winNumbers.length - 1; j++) {
      timeouts.current[j] = setTimeout(() => {
        setWinBalls((prevBalls) => [...prevBalls, winNumbers[j]]);
      }, (j + 1) * 1000);
    }

(ex) useMemo 

const lottoNumbers = useMemo(()=> getWinNumbers(), [])    

const [winNumbers, setWinNumbers] = useState(lottoNumbers);

---useCallback---
(로또 예제에는 잘 안맞을 수도 있음)

-함수 자체를 기억한다(리턴값말고). 렌더링 될 때마다 생성되지 않도록 한다. 
(생성 자체가 오래 걸리는 함수일 경우 유용)
-필수로 써야 하는 때 : 부모가 자식에게 props로 함수를 건네줄 때는 무조건 부모컴포넌트의 함수에 useCallback을 붙여줘야 한다.
함수가 매번 새로 실행되고, 자식은 매번 새로운 함수를 받는것으로 인지해서 자식이 매번 리렌더링하고 헷갈려한다.

** 주의 )) useCallback 안에서 쓰이는 state는 꼭 배열 안에 넣어줘야 한다. (아니면 state값이 바뀌어도 함수 안에서의 그 값을 계속 기억함)
	잊어먹어야 하는 것을 넣기.
(ex)
const onClickRedo = useCallback(() => {
    console.log(winNumbers);    --> 배열 안에 넣지 않으면 첫 winNumbers만 계속 log함.
    setWinNumbers(lottoNumbers);
    setWinBalls([]);
    setBonus(null);
    setRedo(false);
    timeouts.current = [winNumbers];
  }, []);


---기타 hooks 팁---

hooks에서는 state 선언 순서가 매우 중요하다. 중간에 바뀌면 안된다. 
조건문 안에는 절대 넣으면 안된다(특정 조건에서 hook가 실행되고 안되고 하면 안됨).
함수나 반복문 안에도 웬만하면 넣지 말자.

useEffect에서 componentDidMount 부분은 막고 componentDidUpdate만 하고 싶을 때 )

const mounted = useRef(false);

useEffect( () => { 
//ajax
}, []};     ---> componentDidMount만 하고싶을 때.

useEffect(()=>{
if(!mounted.current){
mounted.current = true;}

--useReducer--

useReducer : 리덕스와 비슷한 효과 냄. 
리덕스 쓸 필요 없는 소규모 앱에서는 useReducer, contextAPI 로 대체할수있다.

*자식 컴포넌트들이 깊어질때 state 전달, 상태관리 등을 도와준다. state의 개수를 줄여준다고 한다. 



else { // ajax }
}, 

[바뀌는값]);

==> componentDidmount는 실행되지만 아무것도 하지 않고, update때부터 뭔가를 함. 
