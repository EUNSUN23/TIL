-배운것-
<239. Adding a Dropdown Component>

1. select로 선택 목록 만들기

*ContactData.js 파일
deliveryMethod: {
        elementType: "select",
        elementConfig: {
          options: [
            { value: "fastest", displayValue: "Fastest" },
            { value: "cheapset", displayValue: "Cheapest" },
          ],
        },
        value: "",
      },

--> options를 다음과 같이 Input 컴포넌트에 전달한다. 

*Input.js 파일 
case "select":
      inputElement = (
        <select className={styles.InputElement} value={props.value}>
          {props.elementConfig.options.map((option) => (
            <option value={option.value} key={option.value}>
              {option.displayValue}
            </option>
          ))}
        </select>
      );



<240. Handling User Input>


1. nested Object인 value값에 onChange했을 때의 input value값 넣기

state = {
    orderForm: {
      name: {
        elementType: "input",
        elementConfig: {
          type: "text",
          placeholder: "Your Name",
        },
        value: "",
      },
      street: {

  .../생략}

 inputChangedHandler = (event, inputIdentifier) => {

    const updatedOrderForm = {
      ...this.state.orderForm,
    };
    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };
    updatedFormElement.value = event.target.value;
    updatedOrderForm[inputIdentifier] = updatedFormElement;
    this.setState({ orderForm: updatedOrderForm });
  };


<241. Handling Form Submission>

1. state로 받은 user input을 객체데이터로 바꿔서 데이터베이스에 submit 하기  

*for 루프로 객체의 key값 접근해서, key값 이용해서 새로운 객체 만들기. 

 const formData = {};
    for (let formElementIdentifier in this.state.orderForm) {
      formData[formElementIdentifier] = this.state.orderForm[
        formElementIdentifier
      ].value;
    }
    const order = {
      ingredients: this.props.ingredients,
      price: this.props.price,
      orderData: formData,
      // production-ready 모드에서는 서버에서 total을 계산해야한다.
    }; // 사용자들이 가격을 manipulate 하지 못하게 보통 서버쪽에 저장해두기때문에.

<242. Adding Custom Form Validation>


-validation 체크하는 함수 만들어서 inputChangeHandler에서 실행하기. 

*validation check : 입력값이 타당한 값인지 확인(text면 text 등)
* .trim() : string의 공백 없애기
* isValid = value.trim() !== "";  : 'value.trim()이 공백과 일치하지 않으면 isValid에 할당한다.'
*value는 inputChangeHandler에서 updatedElementForm.value로 받기.
*rules는 this.state.validation이라는 객체.

checkValidity(value, rules) {
    let isValid = false;
    if (rules.required) {
      isValid = value.trim() !== "";
    }

    if (rules.minLength) {
      isValid = value.length >= rules.minLength;
    }

    if (rules.maxLength) {
      isValid = value.length <= rules.minLength;
    }
    return isValid;
  }

<244. Adding Validation Feedback>



<245. Imporving Visual Feedback>

<247. Handling Overall Form Validity>

<248. Working on an Error>

<249. Fixing a Bug>




-질문-

리액트에서 배열 참조문제 까먹은것같다. 
