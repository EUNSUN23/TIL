TIL

1. class-based state VS useState 

1) useState로 만든 state는 객체, 배열, 숫자, 문자열, boolean 등 모든 값이 될 수 있다.
-class 의 state와 가장 다르고 중요한 부분인데, class의 state는 무조건 객체값이었다. 

2) useState는 항상 2개의 요소로 이루어진 배열을 return한다. 첫번째 요소는 현재 state, 값의 snapshot.

state가 업데이트가 될 때마다 전체 component가 다시 실행되고, useState는 state값을 따로 보호해서
전체 함수컴포넌트가 다시 실행되어도 survive하게 해준다. (늘 현재 state값을 return함)


두번째 요소는 state를 업데이트하는 함수. 

3) useState는 update된 state를 자동으로 원래 state에 병합해주지 않는다. 

class의 setState함수는 전체 중 부분 state가 바뀌면 전체에 자동으로 병합해줬지만, (전체에서
달라진 부분만 자동으로 바꿔줌) useState는 state 자체를 아예 replace한다. 

예를들어 원래 state가 {title: '', amount:''} 인데,  {title:'sth'} 로 title이란 state를 바꾸면 
전체 state가 {title:'sth'}로 바뀐다. useState의 두번째 인자로 특정 state를 바꿔주려면 
원래 값을 잃지 않도록 나머지 state값도 전부 다시 initialize해줘야 한다. 

inputState[1]({title:'sth', amount:''}); 이런식으로.  

하지만 복잡한 app에서는 lazy loading이나 여러 이유로 인해 이 amount가 꼭 가장 최신 amount를 반영하지
못할 수도 있다. 그래서 최근 state에 저렇게 접근하는건 별로 좋지 못한 방법.

가장 최신 state에 접근하는 방법은 다음과 같음. 

inputState[1]((prevInputState)=>{
title: event.target.value,
amount: prevInputState[0].amount
})

=> We're not using the latest state which has been fully committed and which is used in this
render cycle of this component but we're using the latest state we set with an updating function
no matter if react already recreated the function or not based on that last update. 

(render가 채 되지 않은 state라도 가장 최근 state를 무조건 반영함) 


4) 'React reuses events' error // react의 event pooling과 관련. 

onChange = { event => inputState[1]( (prevInputState) => {
title: event.target.value,
amount: prevInputState[0].amount
}) 
}

event를 인자로 받는 함수 안에 inputState함수가 있고, 그 안에 prevInputState를 
인자로 받는 함수가 들어있음. 이 prevInputState를 인자로 받는 함수가 closure함수라서
title에 쓰이는 event값은 저장된 바로 직전 keystroke의 값임. (따라서 원래라면,
prevInputState는 비동기함수이지만 의도한 event값에 접근할 수 있어야함)  
하지만 react가 이벤트 객체를 처리하는 고유의 방법때문에, 비동기적으로는 이벤트 객체에 접근할 수 없다. 

--> https://medium.com/react-native-seoul/react-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EC%B2%98%EC%9D%8C%EB%B6%80%ED%84%B0-%EB%B0%B0%EC%9B%8C%EB%B3%B4%EC%9E%90-06-%ED%95%A9%EC%84%B1-
%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%99%80-event-pooling-6b4a0801c9b9

React는 이벤트를 처리하기 위해 바닐라 자바스크립트와 달리 엘리먼트가 렌더링 될 때 
이벤트 리스너(Event Listener)를 제공해 이벤트를 처리한다. 다만 이 이벤트 핸들러는 모든 브라우저에서
동일한 처리를 보장하기 위해 React에서 제공하는 SyntheticEvent 객체를 전달 받는다.
(SyntheticEvent 객체는 
모든 브라우저에서 이벤트를 동일하게 처리하기 위한 래퍼 객체이다. 대부분의 인터페이스는 브라우저 고유 
이벤트와 같다.)
SyntheticEvent는 Pooling되며, 성능상의 이유로 SyntheticEvent객체는 재사용 되고, 모든 속성은 
이벤트 핸들러가 호출된 다음 초기화된다. 따라서 비동기적으로 이벤트 객체에 접근할 수 없다. 
핵심은 React에서 엘리먼트의 이벤트를 처리하기 위해 제공하는 이벤트 리스너의 인자(event, e)가 매번 초기화가 된다는 것이다.



해결 ) inputState함수 바깥에 onChange될 때마다 업데이트되는 newTitle 변수 안에 event 저장하기. 


 onChange = { event => 
{
const newTitle = event.target.value; 

inputState[1]( (prevInputState) => {
title: newTitle,
amount: prevInputState[0].amount
}) 

}
}

 