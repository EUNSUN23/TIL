<227. order submission & passing data between pages>

*query문자(?) 숫자로 바꿔주기 : '+'붙이기. 
==>
ingredients[param[0]] = +param[1];

*componentWillMount는 es6에서도 사용가능함. 

*render로 라우팅되는 컴포넌트에도 history를 props로 주는 법 : 

(예)
<Route path = {this.props.match.path + '/contact-data'} 
render = {() => (<ContactData ingredient = {this.state.ingredients} 
price = {this.state.totalPrice}/>)}/>

1)  withRouter로 묶어준다
export default withRouter(ContactData)

2) render method의 인자로 넣어준다 
<Route path = {this.props.match.path + '/contact-data'} 
render = {(props) => (<ContactData ingredient = {this.state.ingredients} 
price = {this.state.totalPrice} {...props}/>)}/>


<229. Implementing Navigation links>

1. NavLink에 className을 주려면 activeClassName = {} 이렇게 해야한다.

<230. Fetching Orders>

*object를 array로 만드는 법 : 

1. Object.key메소드 이용하기(객체의 key값으로 배열을 만듦)
2. for (let key in Object) {~~} (객체의 key값을 순환하며 {}안의 함수 실행함. )


<236. Creating a Custom Dynamic Input Component>

*switch 문에 받는 인자는 소문자로 써야함??(그래야 에러가 안뜬다고 한다)

(ex)

--소문자로 props넘겨주기--

 render() {
    let form = (
      <form>
        <Input inputtype ="input" type="text" name="name" placeholder="Your Name" />

--switch문 안에서 받을 때에도 소문자로 받기--

switch (props.inputtype) {
    case "input":
      inputElement = <input className={styles.inputElement} {...props} />;
      break;


<237. Setting Up a Config for the Form>



<238. Dynamically Create Inputs based on JS Config>

<239. Adding a Dropdown Component>

<240. Handling User Input>

<241. Handling Form Submission>
 