TIL

1. React.lazy이용해서 lazy loading하기

q. lazy loading이라는 것이 정확히 무엇인지. 

- 16.6부터 지원함

- 컴포넌트를 return하는 '함수'를 인자로 받아서, 
그 return값(컴포넌트)이 lazy loading되도록 한다. 

- Suspense : lazy loading되는 컴포넌트를 감싸준다. 
- fallback : Supense의 속성. 컴포넌트가 lazy loading 될 때 그 기다리는 사이에 
무엇을 render할지 결정함. 


2. componentWillUnmount  함수컴포넌트에서 대체하기

: 함수 컴포넌트는 렌더링 시 컴포넌트 전체가 실행되기 때문에, 
특정 동작이 jsx코드가 render되기 전에 실행되게 하려면 그냥 return jsx 전에
넣어주면 된다. 


3. useEffect의 dependency

dependency는 '값이 변화하고 useEffect 동작에 영향을 미칠 수 있는 요소'이다. 
그리고 가능하면 솔직하게 표시하는 것이 좋다. ( 예 : 자바스크립트의 함수는 object
이기 때문에 코드 자체는 똑같을지라도 definition이 변할 수 있고, 
함수컴포넌트가 렌더 될 때마다 함수도 새로 생성된다. 그래서 
useEffect 안에 부모로부터 props로 받아와서 useEffect실행마다 실제적으로 받아오는 함수가 
다르다면 이것도 dependency로 표시해준다. 표시 안해도 동작은 문제 없지만.)

ex)

const app = props => {

const { onTryAutoSignup } = props;

useEffect(() => {
onTryAutoSignup();
}, [  onTryAutoSignup  ])

...............
.......
}


--> 'app'이 re-render  될 때 props의 값도 바뀔 수 있으므로 props, 그 중에서도
onTryAutoSignup()이라는 함수가 dependency. 구조분해해서 넣어주기. 



4. useSelector, useDispatch

- react-redux 7버전부터 지원함. 
- 함수형 컴포넌트에서도 connect로 redux연결이 가능하지만 그에 대한 대안임.

1) useDispatch();

- dispatch 함수를 return한다. useDispatch(); 를 변수에 저장해서 dispatch함수 사용할 수 있음.

ex) 

const dispatch = useDispatch();

const onIngredientAdded = ingName => dispatch(action.addIngredient(ingName));


- dispatch 함수를 props로 넘겨받지 않고 컴포넌트 안에서 필요한 dispatch함수를 생성해서 사용할 수 있다.  
(** 이때 dispatch함수들은 컴포넌트 내부에 생성되므로 컴포넌트가 렌더될때마다 새로 생성된다. useEffect 동작으로 사용하고 
dependency에 추가할 경우 반드시 useCallback 처리 해줘야 무한루프 안됨. 

*** useDispatch가 return하는 dispatch함수는 컴포넌트 렌더링이 일어나도 rebuilt되지 않는다.)

ex) 


 const onInitIngredients = useCallback(
    () => dispatch(actions.initIngredients()),
    [dispatch]
  );

--> useDispatch가 return하는 dispatch가 dependency이므로 넣어줄것.  



2) useSelector();

- redux의 state를 인자로 받고 state의 value를 return하는 함수를 인자로 받음.

ex) 

const 

 

