-배운것-

1.
********firebase 데이터는 반드시 객체형식으로 보낼것

<201. styling the active route(클릭되어있는 루트)>

-Nav Link-
Link : an anchor tag managed by the react router preventing the default which would be to really send
that request. but there's no class being added to it even though that technically right now is still active page.
(blog.js의 home과 newpost에 hover했을 때 css가 생기는 이유는 이걸 a태그로 인지하기 때문에?) 
we manually have to tell react router to do so and we do this by not using Link but a different type of Link, 
the 'NavLink'. It is similar to Link, but it has some extra props which allow us to define some styling for the
active Link.

1. import NavLink instead of Link, replace NavLink with Link. 

-console로 확인해보면 a 링크로 표시되고, class="active"가 생김. (NavLink의 default className임)

2. 필요에따라 exact 속성 붙이기

this(NavLink에 속성으로 붙은 경로) doesn't change the link we're pointing to, it will always be the path 
we defined, but for the active class, it would take this as a prefix. We override it with exact, now the
full path has to be '/' for this to receive this active css class. 
So with 'exact' added to the first link, it's not needed for the second because there we don't really
have any nested links wich should not trigger the active class 

--> exact를 쓰지 않으면,
home의 NavLink는 '/', newpost의 NavLink는 '/new-post' 일 때, 
newpost가 active된 상태에서도 home까지 css 적용이 됨.
(home에 설정하길, 경로가 '/'로 시작하는 모든 링크에 active class를 넣는 것으로 하기 때문에.)

3. "active"말고 다른 className 사용하기

- activeClassName = "" 속성 넣기

4. NavLink 태그에 inline style로 css 넣기. 
- activeStyle = {{ color: "fa923f", textDecoration: 'underline'}} 


<202. Passing Route Parameters>
--post마다 고유의 id경로 부여해서 클릭했을 때 fullpost가 라우팅되도록 하기
(단 id가 fullpost로 넘어가지는 않은상태)

<Route path="/:id" exact component={Posts} />

it tells the react router "hey whenever you have slash something, this route
is meant"


<203. Extracting Routing Parameters>
넘겨진 params를 포함해서 라우팅된 fullpost에 대한 정보는 props 안에 담겨져서 넘겨진다. 

props > match > params > id: "3", path: "/:id", url: "/3" 
--> Route 의 path 속성에서 설정한대로 'id'가 param으로 넘어옴. 


<205. Using Switch to Load a Single Route>

 <Route path="/" exact component={Posts} />
 <Route path="/new-post" component={Newpost} />
 <Route path="/:id" component={FullPost} />
  
{/*id를 인자로 받는 route를 맨 밑에 둔 이유는 new-post까지 capture할 수 있기 때문에. 
   하지만 하나의path열릴때마다 나머지 path 다같이 render 되기 때문에 newpost 열릴때마다
   fullpost도 같이 열리게 되는 것(?). path이름 안겹치게 수정하면 되지만 다른방법있다고한다..*/}


1. Switch 이용해서 한번에 한 route씩 실행되도록 하기

"please only load one of the routes, the first one actually you find that 
matches from a given set of routes."

<206. Navigating Programmatically>

-Link 컴포넌트 쓰지 않고, props > history> push이용해서 navigating 하는 방법(which can be important 
mostly used after a given operation finished)

Using the Link would be fine for this use case but you sometimes want to have use cases
where you want to navigate after something finished, after a HTTP request was sent for example.
Now to do this, we can take advantage of that history object we received on the props. 

--> routing 시 넘겨진 props > history > go/goBack/goForward : 앞/뒤 페이지로 갈 수 있는 함수.

*history > push : it allows you to push a new page onto the stack of pages. you can put both string and 
javascript object into 'push'. 

(ex)
 postSelectedHandler = (id) => {
  this.props.history.push({pathname: '/'+ id}); 
//this.props.history.push('/'+id);
  };

(Navigating basically just is about a stack of pages. That is why the back and forward buttons work in the 
browser because you can go back to the last page on the stack or forward again to that page on the stack 
you had on the top of it before you went back. )


//post클릭하면 id어쩌구 링크걸려서 fullpost라우팅되게 하기( vs post자체에 라우팅링크걸어놓기).