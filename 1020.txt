
-배운것-

<JS 기술면접 #2>


-지난시간 복습(fe파일 예제) + arguments-

즉시 실행함수 : 

(function(){
var b = 20;})();

--> 선언하자마자 실행. 원래 실행문 옆에는 식별자(메모리주소. 이름.)이 있어야 하는데, 
즉시 실행함수는 식별자가 없어도 실행가능하다. 메모리에 따로 저장할 필요없이 단순히 실행만 하고 사라져야할때 사용. 

var a = function name(params) {} : eff(표현형함수) / name은 버그찾을 때 등 에만 쓰는 서브이름임. 생략가능. 

function() {} : 선언형 함수


**선언형 함수는 선언하자마자 '준비', 즉 컴파일이 되지만 표현형은 그렇지 않다.

함수에 진입하는 순간 다시 준비가 일어남. (컴파일단계)


-클로저-

: 가비지콜렉터가 콜스택상에서 함수실행이 종료된 함수데이터를 버리지 못하게 하는것. 

클로저- 공식적으로는 스코프가 연결되어있는 상태를 클로져라고 말함. 

function foo(){
  const a = 10;
  function bar(){
    const sum = a+a;
  }
  bar();
}

foo();

--> 이런것도 클로저상태라고 하지만 bar()는 실행되자마자 사라짐.  딱히 클로저라고 지칭해서 부를 필요도 없고 함. 

<클로저 문제 & 해결 예제>


-문제-

for(var i = 0; i< buttons.length; i++ ){
    buttons[i].onclick =
   function 알짜(){
     targets[i].style.backgroundColor = 'lime';
             }
     }

--> 알짜 함수가 실행될 때에 참조하는 i는 이미 3이 되어있음. (함수 안의
인자는 실행될 때 결정되기 때문에. ) 


-해결-

for(var i = 0; i< buttons.length; i++ ){
    buttons[i].onclick = (
        function(j){
        return function 알짜(){
            targets[j].style.backgroundColor = 'lime';
        }
            }
    )(i);
}

--> 즉시실행함수 안에 알짜 함수를 넣어서 클로져 스코프를 만들어둠. 
(보통 함수가 종료되면 그 안의 인자값도 사라지지만, 중첩함수의 경우
부모함수가 종료되어도 자식함수가 클로져 스코프를 통해 부모함수의 값들에 접근할 수 있다. 




<burgerbuilder 리뷰 겸 복습>


**한 컴포넌트 전체를 감싸는 axios 에러 핸들러 (higher order component형태) 만들기 - #183







-질문-



* 

const = [0,1,2]; 는 컴파일단계에서 다 준비됨. 
var i = 0; 는 처음에 undefined, 그 다음에 값이 할당됨.  차이는?