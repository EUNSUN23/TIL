TIL

1. useState의 return값을 구조분해할당 (Array destructing) 하기 


const [inputState, setInputState] = useState({title:' ', amount: ' '});


It allows you to pull elements out of the array returned by 'useState' and 
store them in variable. You can add as many variables as you have elements
in array. 



2. Multiple state 다루기

useState의 state는 꼭 object일 필요가 없지만, 클래스형 컴포넌트에서처럼 react가 update된 state
와 기존 state를 자동으로 merge해주지 않는다. 

따라서 multiple state를 다룰때는, 함께 update해야하는 state가 아닌 이상, 
각각의 state를 useState로 개별적으로 관리해준다. 

const [enteredTtile, setEnteredTtile] = useState('');
const [enteredAmount, setEnteredAmount] = useState('');


3. Hooks rules

1). hooks는 항상 함수 컴포넌트 안에서 사용한다

2). hooks는 항상 컴포넌트의 root level (맨 윗부분)에 위치해야 한다.  



4. etc

Math.random().toString()  => 랜덤한 문자열 만들어주는듯. 


5. CORS (Cross-Origin-Resource-Sharing)
교차 출처 리소스 공유(Cross-Origin Resource Sharing, CORS)는 추가 HTTP 헤더를 사용하여, 
한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 
브라우저에 알려주는 체제입니다. 웹 애플리케이션은 리소스가 자신의 출처(도메인, 프로토콜, 포트)와 다를 때 
교차 출처 HTTP 요청을 실행합니다.

교차 출처 리소스 공유 표준은 웹 브라우저에서 해당 정보를 읽는 것이 허용된 출처를 서버에서 설명할 수 있는
 새로운 HTTP 헤더를 추가함으로써 동작합니다. 추가적으로, 서버 데이터에 부수 효과(side effect)를 일으킬 수
 있는 HTTP 요청 메서드(GET을 제외한 HTTP 메서드 //단 preflight가 일어나지 않는 조건도 있음. 자세한 내용은
https://developer.mozilla.org/ko/docs/Web/HTTP/CORS참고)에 대해, CORS 명세는 브라우저가 요청을 
OPTIONS 메서드로 "프리플라이트"(preflight, 사전 전달)하여 지원하는 메서드를 요청하고, 
서버의 "허가"가 떨어지면 실제 요청을 보내도록 요구하고 있습니다. 
또한 서버는 클라이언트에게 요청에 "인증정보"(쿠키, HTTP 인증)를 함께 보내야 한다고 알려줄 수도 있습니다.

예)

보안 상의 이유로, 브라우저는 스크립트에서 시작한 교차 출처 HTTP 요청을 제한합니다. 
예를 들어, XMLHttpRequest와 Fetch API는 동일 출처 정책을 따릅니다. 
즉, 이 API를 사용하는 웹 애플리케이션은 자신의 출처와 동일한 리소스만 불러올 수 있으며, 
다른 출처의 리소스를 불러오려면 그 출처에서 올바른 CORS 헤더를 포함한 응답을 반환해야 합니다.

