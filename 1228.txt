TIL

1. 커스텀훅으로 redux대체하기 정리

- logic뿐만 아니라 data도 공유하는 커스텀훅을 만들기 위해서는 
globalState, actions, listneres등을 커스텀훅 바깥에 생성해야 한다. 
(안에 생성할 경우 커스텀 훅 사용하는 각 컴포넌트마다 
고유의 state사용하게 된다.)

- listener의 용도

: setState함수가 담겨진 배열. (왜 굳이 배열로?..)전역 store인 globalState가
업데이트 되면 이 setState를 호출해서 커스텀훅(useStore)를 리렌더하고,
커스텀훅 사용하는 모든 컴포넌트들을 rerender시킨다. 

- initStore 함수로 전역store 초기화작업하기

: action, initialState를 인자로 받아서 flexible하게 전역store를 꾸릴 수 있다. 
(redux에서 다수의 reducer로 한 state만드는 것처럼)


2. 커스텀훅 store 성능최적화

* 렌더링 문제 : data를 공유하기 때문에 
useStore를 사용하는 한 컴포넌트에서 (ex:productItem중 하나) dispatch로 state를 바꾸면
setState가 호출되고, useStore리렌더되고, state바꾼 컴포넌트 뿐만 아니라 
다른 컴포넌트들도 리렌더됨. 

-> useStore에 shouldListen 인자로 받고, true일 때만 listeners배열에 setState함수 넣는 조건문 쓰기.
불필요하게 렌더되는 컴포넌트 안에서 useStore(false);. 
(부모 컴포넌트로부터 업데이트된 useStore데이터 받아쓰는 자식 컴포넌트 안에서는 
useStore의 dispatch function을 사용하기는 해도 그에따른 데이터업데이트가
또 필요하지는 않기 때문에 )

3. styled component 

(js파일을 loads하고, 컴포넌트 내 코드량이 늘고, css에서 제공하는 auto completion기능 등이 없고..한 
단점이 있다. 그리고 특정 스타일을 가진 컴포넌트를 만드는것이기때문에 다른 tag에는 스타일 일괄적용이 
안된다.)

- React와 관련없는 javascript라이브러리. 

- css스타일이 적용된 컴포넌트를 만들어준다. 

ex)

const StyledDiv = styled.div`width:50px; height: 50px; .... `;
**중요: 컴포넌트 바깥에 만들것 ** 

-> ``사이의 css가 적용된 div컴포넌트를 만든다. 

1)``사이의 css는 inline-style로 div에 적용된것이 아니라, html 헤더에 
selector로 style지정한것. 고로 inline-style로 렌더링 성능 저하되는것을 방지한다. 

2) js 문법이기때문에 ${}넣어서 다이나믹하게 css설정도 가능

ex) 

const StyledButton = styled.button`background-color : ${props => props.alt ? 'red' : 'green' }`


 
-> <StyledDiv onClick = {}></StyledDiv> // 컴포넌트이기 때문에 onClick등의 props 넘겨주는것도 가능.

