TIL

1. useEffect 이용해서 clearTimeout하기 

1) setTimeout 참조값을 변수에 담아서 저장하기 

setTimeout은 참조값(reference)를 제공하기 때문에 변수에 담을 수 있다. 

"We always just want to measure a change from the latest keystorke after the pause. 
We're not carrying about an older keystroke. So we want to clean up that old timers"

2) useEffect의 마무리 동작 (return + 함수)

- 리턴하는 것은 반드시 함수여야 한다. 
- 이 함수는 해당 useEffect의 다음 실행 직전에 실행된다. (useEffect 실행되고 난 후가 아님!)
=>즉 keystroke눌러서 다음 useEffect가 trigger되지 않으면 clean up도 하지 않음. 
(첫 렌더시 세팅하는 setTimeout은 그 다음 keystroke있기 전까지 clean up 되지 않음)
- dependencies가 빈 배열이라면 (useEffect가 첫 렌더시 한번만 실행된다면) 이 마무리 동작 함수는 
컴포넌트가 unmounted될 때 (돔에서 떨어질 때?) 실행된다. 

3) setTimeout 참조값 담은 변수를 인자로 받은 clearTimeout 실행하는 함수 return 하기

return () => {
clearTimeout(timer);
}



2. && 으로 삼항연산자 줄이기

<div className="ingredient-form__actions">
            <button type="submit">Add Ingredient</button>
            {props.loading && <LoadingIndicator />}
          </div>

==> props.loading이 true 일때만 LoadingIndicator 를 렌더한다. (컴포넌트이므로 렌더. 특정 값을 return할 수도 있음. )
 

3. react는 state를 일괄처리(batch)한다.

const clearError = () => {
setError(null);
setIsLoading(false);
} 

동기적으로 실행되는 event안에 속한 state update들은 각각 한번씩 re-rendering을 일으키는게 아니라
일괄 처리되어서 한꺼번에 여러 state를 update하는 하나의 re-rendering을 일으킨다. 



