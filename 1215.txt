TIL

1. test 


1) testing containers

- redux가 섞여있는 container(Burgerbuilder.js)test하기
: redux스토어와 container가 잘 연결되는지는 테스트 할 필요 없음. 스토어에서 container로 넘겨주는
props에만 신경쓰면 된다. 그러므로 props만 simulate하면 되고, 실제 스토어에 connect할 필요 없음.

1. 컴포넌트 이름 앞에 export 붙여서 named하게 복사해주기.(connect까지 묶여있는 export default말고)
--> connect 말고 컴포넌트 자체만 shallow하게 복사됨. 

2) testing redux

actions, reducer의 연결과정같이 복잡한건 테스트 안 해도 됨. reducer변화가 잘 반영되는지 test할건데
action creater에 복잡한 로직 넣지 않는다면 reducer를 테스트하는것은 간단하다. 


2. deploying the react app Steps (배포)


1) Check (&Adjust) Basepath 
react router 사용 시 app을 BrowserRouter로 감쌀 때 basename을 정함.
this is always required when your app is served from something else than the root route,
the route domain. If you're serving your app from, for example, example.com/my-app, 
then you'll need to set the basename to my-app for the router to work correctly. 

ex)
<BrowserRouter basename = "/my-app/" >

2) Build & Optimize Project

We need to build an optimized project. This is done with one convenient command in 
our application. 

=> npm run build

This will automatically build the project and optimize all our javascript bundles to have 
a very small codebase and we will upload it on a server because you want to ship as
little code as possible since that will be as fast as possible. 


3) Server must ALWAYS serve index.html (also for 404 cases)

This is required due to the way the Internet works. If your user visits my-app.com/users , then 
the server is the first to receive that route and chances are, the server doesn't know the /users path
because you defined it in your react app. For that, not to throw an error, your react app needs to 
get a chance of parsing the path and it only does so if you return the index.html fie for that unknown route.
(it is unknown to the server in the end)
So always return index.html in 404 cases. Otherwise, your routing dependant react applications won't work.

--> this is something all static hosts typically allow you to configure and if you're not using a static 
host but you're using your node.js server, you just need to write code - you need to set up 
a catch-all-route-and-return-index.html. And of course the same logici applies for any outher server-side
language. 


4) Upload Build Artifacts to (static) server

Finally, upload the build artifacts you get from the second step. Build an optimized project to a static server.
you don't need a server running php or node or anything like that. 
In the end, what you will deploy here is a SPA. It doesn't need a server-side language. So a static server like
AWS S3, Github pages or Firebase or any other server will do, and you just upload the build artifacts(in /build folder
when using create-react-app),
not your entire project folder. 


3. Deploying on Firebase
*You're free to choose whichever static file host you want to use. Simply follow the instructions of your
chosen host to upload the files in the build folder and make sure you always return the index.html file. 

Firebase 콘솔 -> Hosting > 필요한 툴 안내대로 설치. > firebase login, firebase init, firebase deploy 

앱 URL >  https://burgerbuilder-react-redux.web.app

내 도메인에서 접근하는 방법도 있음(firebase 공식문서 참고)


4. 개발자용 powershell 스크립트 실행 조건 설정 

검색 > '서명하지 않고 로컬 powerShell 스크립트 실행할 수 있도록 설정 ..'

(이렇게 해야 firebase login 할수있음) 